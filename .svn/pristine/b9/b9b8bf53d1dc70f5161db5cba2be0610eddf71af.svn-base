using DexComanda.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Security;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using System.Management;
using System.Net.NetworkInformation;
using System.Net.Mail;
using HumanAPIClient.Service;
using HumanAPIClient.Model;
using Microsoft.Win32;
using DexComanda.Models;
using System.ServiceProcess;
using DexComanda.Integração;
using Microsoft.SqlServer.Server;
using System.Linq;
using MySql.Data.MySqlClient;
namespace DexComanda
{
    public class Utils
    {
        private static Conexao conexao;
        private static SimpleSending cliente;
        private static SimpleMessage mensagem;
        private static string RetornoServ;
        private static DateTime DataInicial;
        private static string NomeEmpresa;
        private static DateTime DataFinal;
        private static string NomeCliente;
        private static int TotalSelecionado;
        private static bool Logado;
        public static int _CodUserLogado;
        private static string temp;
        private static MySqlConnection MysqlConnection;
        private static MySqlCommand MysqlCommand;
        private static MySqlDataAdapter MysqlDataAdapter;
        public static Boolean EfetuarLogin(string nomeUsuario, string senha)
        {

            if (nomeUsuario.Equals(""))
            {
                MessageBox.Show("Informe seu usuário.");
            }
            else if (senha.Equals(""))
            {
                MessageBox.Show("Informe sua senha.");
            }
            else
            {
                string hashSenha = EncryptMd5(nomeUsuario, senha);
                conexao = new Conexao();
                NomeEmpresa = Sessions.returnEmpresa.Nome;
                DataSet usuarios = conexao.SelectAll("Usuario", "spObterUsuario");

                DataView dv = usuarios.Tables[0].DefaultView;
                //  Sessions.returnUsuario = dv; 
                string query = "Nome = '" + nomeUsuario + "' AND Senha = '" + hashSenha + "'";

                dv.RowFilter = query;

                if (dv.Count > 0)
                {
                    //_CodUserLogado = int.Parse(dv[0].Row["Codigo"].ToString());
                    string _nome = dv[0].Row["Nome"].ToString();
                    string _senha = dv[0].Row["Senha"].ToString();

                    if (_nome.Equals(nomeUsuario) && _senha.Equals(hashSenha))
                    {
                        Sessions.returnUsuario = new Usuario()
                        {
                            Nome = _nome,
                            senha = _senha
                        };

                        Main principal = new Main();
                        principal.ShowDialog();

                    }
                    else
                    {
                        MessageBox.Show("Usuário ou Senha incorretos.");
                        Logado = false;
                    }
                }
                else if (nomeUsuario.Equals("admin"))
                {
                    frmConfiguracoes frmConfiguracoes = new frmConfiguracoes();
                    frmConfiguracoes.ShowDialog();
                }
                else
                {
                    MessageBox.Show("Usuário não encontrado.");
                    Logado = false;
                }

            }
            return Logado;
        }


        public static string CriaArquivoTxt(string iNomeArquivo, string iText)
        {
            try
            {
                temp = Directory.GetCurrentDirectory() + @"\" + iNomeArquivo + ".txt";

                if (!System.IO.File.Exists(temp))
                {
                    System.IO.File.Create(temp).Close();
                    System.IO.File.AppendAllText(temp, iText);
                }
                else
                {
                    System.IO.File.Delete(temp);
                    System.IO.File.Create(temp).Close();
                    System.IO.File.AppendAllText(temp, iText);
                }
            }
            catch (Exception Erro)
            {

                MessageBox.Show("Não foi possivel criar o arquivo em :" + temp + " favor verificar se possui privilégios no destino" +
                                " Informar o erro ao suporte " + Erro.Message);
            }
            return iText;
        }
        //public static string[] RetornoTxt()
        //{
        //    string []linhas;
        //    int cont = 0;
        //    string Caminho;

        //    try
        //    {
        //        Caminho = Directory.GetCurrentDirectory() +@"\ConfigSMS.txt";
        //        System.IO.StreamReader file = new System.IO.StreamReader(Caminho);

        //        while ((linhas = file.ReadLine()) != null)
        //        {
        //            Arquivo.Add(linhas);
        //            cont++;
        //        }

        //        file.Close();
        //    }
        //    catch (Exception e)
        //    {

        //        MessageBox.Show("Arquivo para envio de SMS não encontrado em" + e.Message);
        //    }

        //    return Arquivo;

        //}

        public static void ImpressaoLPT1(string iArquivo, string iPorta)
        {
            try
            {
                string iCaminho = Directory.GetCurrentDirectory() + @"\" + "Impressao.txt";
                System.IO.File.Copy(iCaminho, iPorta);
                System.IO.File.Copy("#10" + "#17", iPorta);
                System.IO.File.Delete(iCaminho);
            }
            catch (Exception E)
            {

                MessageBox.Show("Não foi possivel imprimir o Pedido, favor tentar novamente ou informar o erro ao suporter " + E.Message, "Aviso Dex");
            }



        }
        public string EnviaEmail(string iProvedor, string iFrom, string iPara, string iAssunto, string iMensagem, bool iSSL, string iUsuario, string ISenha)
        {
            System.Net.Mail.MailMessage Email = new System.Net.Mail.MailMessage();
            Email.To.Add(iPara);
            Email.Subject = iMensagem;
            Email.From = new System.Net.Mail.MailAddress(iFrom);
            Email.Body = iMensagem;

            System.Net.Mail.SmtpClient smpt = new System.Net.Mail.SmtpClient();
            smpt.Host = iProvedor;
            smpt.EnableSsl = iSSL;

            smpt.Credentials = new System.Net.NetworkCredential(iUsuario, ISenha);
            smpt.Send(Email);

            return smpt.ToString();
        }
        public static string EnvioSMS(string iPara, string iMessagem, string iFrom)
        {
            cliente = new SimpleSending("xsistemas", "IdJQcMl5DU");
            mensagem = new SimpleMessage();
            mensagem.To = iPara;
            mensagem.From = iFrom;
            mensagem.Message = iMessagem;
            mensagem.Schedule = DateTime.Now.ToString();
            List<String> retorno = cliente.send(mensagem);

            return RetornoServ = retorno[0].ToString();
        }
        public static void ClientesAniversariantes(string iDataInicial, string iDataFinal, string iMessagem,string iPorta)
        {
            conexao = new Conexao();
            DBExpertDataSet dbExpert = new DBExpertDataSet();
            DataInicial = Convert.ToDateTime(iDataInicial + "/" + DateTime.Now.Year + " 00:00:00");
            DataFinal = Convert.ToDateTime(iDataFinal + "/" + DateTime.Now.Year + " 23:59:59");
            DataSet ListaClientes = conexao.SelectObterAniversariantes("Pessoa", "spObterAnivesariantes", DataInicial, DataFinal);
            foreach (DataRow row in ListaClientes.Tables["Pessoa"].Rows)
            {
                if (ListaClientes.Tables["Pessoa"].Rows.Count > 0)
                {
                    TotalSelecionado = ListaClientes.Tables["Pessoa"].Rows.Count;

                    string Telefone = row["Telefone"].ToString();
                    NomeCliente = row["Nome"].ToString();

                    if (Telefone.Length == 8)
                    {
                        EnvioSMSModen.EnviaSMS(9600, iPorta, "+55279" + Telefone, AdicionaNomeCliente(iMessagem));
                        //  RetornoServ = DexComanda.Utils.EnvioSMS("55279" + Telefone, AdicionaNomeCliente(iMessagem), NomeEmpresa);
                    }
                    else
                    {
                        EnvioSMSModen.EnviaSMS(9600, iPorta, "+5527" + Telefone, AdicionaNomeCliente(iMessagem));
                    }
                }
                else
                {
                    MessageBox.Show("Não há clientes com o filtro selecionado");
                    break;
                }
               
            }

        }
        private static string AdicionaNomeCliente(string iMensagem)
        {
            if (iMensagem.Contains("@Cliente"))
            {
                iMensagem = iMensagem.Replace("@Cliente", NomeCliente);
            }

            return iMensagem;
        }

        public static string EncryptMd5(string _login, string _senha)
        {
            MD5 md5Hasher = MD5.Create();
            byte[] valorCriptografado = md5Hasher.ComputeHash(Encoding.Default.GetBytes(_login + "_" + _senha));
            StringBuilder strBuilder = new StringBuilder();

            for (int i = 0; i < valorCriptografado.Length; i++)
            {
                strBuilder.Append(valorCriptografado[i].ToString("x2"));
            }

            return strBuilder.ToString().ToUpper();
        }
        public static string CriptografarArquivo(string iArquivo)
        {
            MD5 md5Hasher = MD5.Create();
            byte[] valorCriptografado = md5Hasher.ComputeHash(Encoding.Default.GetBytes(iArquivo));
            StringBuilder strBuilder = new StringBuilder();

            for (int i = 0; i < valorCriptografado.Length; i++)
            {
                strBuilder.Append(valorCriptografado[i].ToString("x2"));
            }

            return strBuilder.ToString().ToUpper();
        }
        public static string CriptoGrafarOnExecute(string iNomeMaquina, string iCNPJ)
        {
            MD5 md5Hasher = MD5.Create();
            byte[] valorCriptografado = md5Hasher.ComputeHash(Encoding.Default.GetBytes(iNomeMaquina + iCNPJ));
            StringBuilder strBuilder = new StringBuilder();

            for (int i = 0; i < valorCriptografado.Length; i++)
            {
                strBuilder.Append(valorCriptografado[i].ToString("x2"));
            }

            return strBuilder.ToString().ToUpper();
        }

        public static void Restart()
        {
            MessageBox.Show("A aplicação será reiniciada.");

            Application.Exit();
            Kill();
            Application.Restart();
        }

        public static void PopularGrid(string table, DataGridView gridView, string spName)
        {
            Conexao con = new Conexao();
            gridView.DataSource = null;
            gridView.AutoGenerateColumns = true;
            gridView.DataSource = con.SelectAll(table, spName);
            gridView.DataMember = table;
            con.Close();
        }

        public static void Kill()
        {
            System.Diagnostics.Process[] process = System.Diagnostics.Process.GetProcessesByName("DexComanda");
            // Before starting the new process make sure no other MyProcessName is running.
            foreach (System.Diagnostics.Process p in process)
            {
                p.Kill();
            }


        }

        public static void ScripAtualizar(string caminho, string script, string ConectionString)
        {
            //Pega o caminho completo
            string fullPath = Directory.GetDirectoryRoot(caminho);

            //
            string arquivo = caminho + "\\" + script;

            FileStream fileToRead = File.Open(arquivo, FileMode.Open);
            string linhas = "";
            string line;
            StreamReader sr = new StreamReader(fileToRead);

            while ((line = sr.ReadLine()) != null)
            {
                linhas += line + "\r\n";
            }

            SqlConnection SqlConnection = new SqlConnection(ConectionString);
            SqlCommand SqlCommand = new SqlCommand();
            SqlCommand.Connection = SqlConnection;
            try
            {
                SqlCommand.CommandText = linhas;

                SqlConnection.Open();
                SqlCommand.ExecuteNonQuery();
                MessageBox.Show("Banco de Dados Atualizado com sucesso");
            }
            catch (Exception e)
            {
                MessageBox.Show("Ocorreu um erro ao executar a atualizacao favor entrar em contato com suporte  e informar a Mensagem a seguir:" +
                e.Message);
                throw;
            }

        }
        public static Boolean ValidaData(DateTime DataInicio, DateTime dataFim)
        {
            DataInicio = DataInicio.AddMonths(1);
            if (DataInicio >= dataFim)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        public static void CriarUsuario(string iConexao, string iNomeUser, string iSenha)
        {
            try
            {
                SqlConnection SqlConnection = new SqlConnection(iConexao);
                SqlCommand SqlCommand = new SqlCommand();
                SqlCommand.Connection = SqlConnection;

                SqlCommand.CommandText = "create login dex with password='1234'; CREATE USER [digital] FOR LOGIN dex WITH DEFAULT_SCHEMA=[dbo]";

                SqlConnection.Open();
                SqlCommand.ExecuteNonQuery();
                MessageBox.Show("Usuario Criado");
            }
            catch (Exception e)
            {
                MessageBox.Show("" + e.Message);

            }

        }
        public static string EnderecoMAC()
        {
            return (from nic in NetworkInterface.GetAllNetworkInterfaces()
                    where nic.OperationalStatus == OperationalStatus.Up
                    select nic.GetPhysicalAddress().ToString()
                         ).FirstOrDefault();

        }

        public static string GravaRegistro(string iArquivo)
        {
            // string iArquivo = null;
            try
            {
                // iArquivo = CriaArquivoTxt("Liberacao",iNomeMaquina + iCNPJ);

                RegistryKey RegistroKey = Registry.LocalMachine.OpenSubKey("Software", true);
                RegistroKey = RegistroKey.CreateSubKey("DexSistemas");
                RegistroKey.SetValue("RegistroDex", iArquivo);
                //RegistroKey.SetValue("RegistroDex", CriptografarArquivo(iArquivo));
                RegistroKey.Close();

            }
            catch (Exception deuruim)
            {

                MessageBox.Show(deuruim.Message);
            }

            return iArquivo;
        }

        public static string RetornaNomePc()
        {
            string PcName = System.Net.Dns.GetHostName();
            return PcName;
        }
        public static bool LeArquivoRegistro()
        {
            string iRetorno;
            bool OK = false;
            RegistryKey RegistroKey = Registry.LocalMachine.OpenSubKey("Software", true);
            iRetorno = RegistroKey.OpenSubKey("DexSistemas", true).GetValue("RegistroDex", true).ToString().ToString();


            if (CriptoGrafarOnExecute(Sessions.returnEmpresa.CNPJ, Sessions.returnEmpresa.DataInicio.ToString()) == iRetorno)
            {
                OK = true;
            }


            return OK;
        }

        public static string GeraRetornaContraSenha(string iSenha)
        {
            string iContraSenha = "";
            string iPrimeiraPosicao, iSegundaPosicao, iUltimaPosicao = null;

            try
            {
                iPrimeiraPosicao = iSenha.Substring(1, 1) + 1;
                iSegundaPosicao = iSenha.Substring(2, 1) + 2;
                iUltimaPosicao = iSenha.Substring(13, 1) + 13;

                iContraSenha = CriptografarArquivo(iSenha + iPrimeiraPosicao + iSegundaPosicao + iUltimaPosicao);
            }
            catch (Exception er)
            {

                throw;
            }
            return iContraSenha;
        }

        public static string ServicoSQLATIVO()
        {
            string status = "";
           // string command = "SELECT * FROM sys.databases WHERE name = 'DbExpert'";
            try
            {

                ServiceController MeuServico = new ServiceController("MSSQLSERVER");
                status = MeuServico.Status.ToString();

                if (status.Equals("Stopped")||(status.Equals("Paused")))
                {
                    try
                    {
                        MeuServico.Start();
                        MeuServico.WaitForStatus(ServiceControllerStatus.Running);
                    }
                    catch (Exception ErroServico)
                    {

                        MessageBox.Show("Não foi possivel iniciar o serviço do SQLSERVER pois:" + ErroServico.Message);
                    }

                }
            }
            catch (Exception Erro1)
            {

                MessageBox.Show(Erro1.Message);
            }

            return status;
        }

        //public static string ExisteBanco(string iConexao, string iBanco)
        //{
        //    //lol
        // //   return string TextBox;
        //}

        public static void CriaUsuario(string iConexao)
        {
            string iScript = "create login dex with password='1234' CREATE USER [digital] FOR LOGIN dex WITH DEFAULT_SCHEMA=[dbo]";
            SqlConnection sqlConection = new SqlConnection(iConexao);
            SqlCommand sqlCommand = new SqlCommand(iScript);
            sqlConection.Open();
            sqlCommand.ExecuteNonQuery();
        }
        public static Boolean CriaLicencaFree(string iCnpj,string iNome,string iEmail,string iTelefone)
        {
            DateTime iDataLiberacao =DateTime.Now;
            DateTime iDataExpiracao = iDataLiberacao.AddMonths(1);
            Boolean iCriouLicenca = false;
            bool iAtivo = true;
            try
            {
                MysqlConnection = new MySqlConnection("Server=mysql.expertsistemas.com.br;Port=3306;Database=exper194_lazaro;Uid=exper194_lazaro;Pwd=@@3412064;");
                MysqlConnection.Open();
                if (MysqlConnection.State == ConnectionState.Open)
                {
                    MysqlCommand = new MySqlCommand("insert into  Licenca (CNPJ,DataLiberacao,DataExpiracao,AtivoSn,Nome,Telefone,Email) values ('" + iCnpj + "','" + iDataLiberacao + "','" + iDataExpiracao + "'," + iAtivo + ",'" + iNome + "','"+iTelefone+"','" + iEmail + "')", MysqlConnection);
                    MysqlDataAdapter = new MySqlDataAdapter(MysqlCommand);
                    MysqlDataAdapter.InsertCommand = MysqlCommand;
                    if (MysqlCommand.ExecuteNonQuery() ==1)
                    {
                        iCriouLicenca = true;
                    }

                }
                else
                {
                    MessageBox.Show("Erro DexCommanda" + "Não foi possivel conectar ao servidor para geração de Licença Free,#13" +
                                    "verifique sua coneão com a internet /Firewall/Anti-Virus - e tente novamente");
                }
                // MysqlConnection.Close();
            }
            catch (Exception e)
            {

                MessageBox.Show("Erro na validação da licença" + e.Message);
            }
            return iCriouLicenca;
        }
    }
}
