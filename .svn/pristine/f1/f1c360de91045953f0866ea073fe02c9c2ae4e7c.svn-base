using DexComanda.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using DexComanda.Relatorios;

namespace DexComanda
{
    public partial class Main : Form
    {
        private Conexao con;
        private CancelarPedido cancelPedid;
        private int rowIndex;
        private List<Produto> Produtos;
        private Main parentWindow;
        private Main parentMain;
        private bool DescontoDia = Sessions.returnConfig.DescontoDiaSemana;
        private bool ControlaMesas = Sessions.returnConfig.UsaControleMesa;
        //private bool UserAdmin = Sessions.returnUsuario.AdministradorSN;
        //private bool UserCancelaPedido = Sessions.returnUsuario.CancelaPedidosSN;
        //private int UserLogado = Sessions.returnUsuario.Codigo;
        //private bool ControlaLoginSenha = Sessions.returnConfig.UsaLoginSenha;


        public Main()
        {

            InitializeComponent();
            cancelPedid = new CancelarPedido();
            //  ListaClientes();
            //cbxFiltroTipo.Visible = Sessions.returnConfig.UsaControleMesa;
        }

        public Main(Main parent)
        {
            InitializeComponent();
            cancelPedid = new CancelarPedido();
            this.parentMain = parent;

        }
        private void gruposToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmAdicionarGrupo frm = new frmAdicionarGrupo();
            frm.ShowDialog();
        }

        private void Main_Load(object sender, EventArgs e)
        {

            this.txbTelefoneCliente.Focus();
            con = new Conexao();
            if (DescontoDia)
            {
                PopularGrid("Produto", this.produtosGridView);
            }
            else
            {
                PopularGrid("Produto", this.produtosGridView, "spObterProdutoSemDesconto");
            }

            PopularGrid("Pedido", this.pedidosGridView, "spObterPedido");

            // Menu Entregador Visivel
            entregadorToolStripMenuItem.Visible = Sessions.returnConfig.ControlaEntregador;

            PopularGrid("Pessoas", this.clientesGridView);
            if (Sessions.returnUsuario != null)
            {
                this.txtUsuarioLogado.Text = Sessions.returnUsuario.Nome;
            }

            usuáriosToolStripMenuItem.Visible = Sessions.returnConfig.UsaLoginSenha;
            entregadorToolStripMenuItem.Visible = Sessions.returnConfig.ControlaEntregador;
        }

        private void cadastrarToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            frmCadastroCliente frm = new frmCadastroCliente(this);
            frm.ShowDialog();
        }

        private void produtosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmCadastrarProduto frm = new frmCadastrarProduto(this);
            frm.ShowDialog();
        }

        public void PopularGrid(string table, DataGridView gridView)
        {
            gridView.DataSource = null;
            gridView.AutoGenerateColumns = true;
            gridView.DataSource = con.SelectAll(table, "spObter" + table);
            gridView.DataMember = table;

            //txbTelefoneCliente.Text = Convert.ToString(0); 
            con.Close();
        }

        public void PopularGrid(string table, DataGridView gridView, string spName)
        {
            gridView.DataSource = null;
            gridView.AutoGenerateColumns = true;
            gridView.DataSource = con.SelectAll(table, spName);
            gridView.DataMember = table;

            //txbTelefoneCliente.Text = Convert.ToString(0);
            con.Close();
        }


        public void ConsultarCliente(object sender, EventArgs e)
        {
            BuscarCliente();
        }

        public void ConsultarClienteParaEdicao(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (cbxBuscarPor.Text != "")
                {
                    string propriedade = cbxBuscarPor.SelectedItem.ToString();
                    string valor = txtBurcarValor.Text;

                    if (!propriedade.Equals(""))
                    {
                        if (!valor.Equals(""))
                        {
                            string query = null;
                            DBExpertDataSet dbExpert = new DBExpertDataSet();
                            DataSet result = con.SelectAll("Pessoa", "spObterPessoas");


                            if (propriedade.Equals("Nome"))
                            {
                                query = "Nome LIKE '%" + valor + "%'";
                            }
                            else
                            {
                                query = "Telefone ='" + valor + "'";
                            }

                            var dv = result.Tables[0].DefaultView;
                            dv.RowFilter = query;

                            var newDS = new DataSet("Pessoa");
                            var newDT = dv.ToTable();

                            newDS.Tables.Add(newDT);

                            this.clientesGridView.DataSource = null;
                            this.clientesGridView.AutoGenerateColumns = true;
                            this.clientesGridView.DataSource = newDS;
                            this.clientesGridView.DataMember = "Pessoa";
                        }
                        else
                        {
                            MessageBox.Show("Informe Nome ou Telefone.");


                        }
                    }

                }
                else
                {
                    MessageBox.Show("Informe se a busca é por Nome ou Telefone");
                }
            }

        }

        //   private void DeleteAll()

        private void BuscarCliente()
        {
            try
            {
                if (txbTelefoneCliente.Text != "")
                {
                    var telefone = this.txbTelefoneCliente.Text;
                    //  DBExpertDataSet dbExpert = new DBExpertDataSet();

                    DataSet pessoaTelefone = con.SelectPessoaPorTelefone("Pessoa", "spObterPessoaPorTelefone", telefone);

                    if ((pessoaTelefone.Tables["Pessoa"].Rows.Count == 0))
                    {
                        DialogResult resultado = MessageBox.Show("Telefone não encontrado! Deseja cadastrar?", "Aviso", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (resultado == DialogResult.Yes)
                        {
                            frmCadastroCliente frm = new frmCadastroCliente(this);
                            frm.txtTelefone.Text = telefone;


                            frm.ShowDialog();
                        }
                    }
                    else if ((pessoaTelefone.Tables["Pessoa"].Rows.Count == 1))
                    {

                        DataSet Pessoa = con.SelectPessoaPorTelefone("Pessoa", "spObterPessoaPorTelefone", telefone);
                        DataRow dRow = Pessoa.Tables["Pessoa"].Rows[0];

                        int CodigoPessoa = int.Parse(dRow.ItemArray.GetValue(0).ToString());
                        this.txtNome.Text = dRow.ItemArray.GetValue(1).ToString();
                        this.txtEndereco.Text = dRow.ItemArray.GetValue(2).ToString();


                        if (dRow.ItemArray.GetValue(7).ToString() != "")
                        {
                            this.txtEndereco.Text = this.txtEndereco.Text + ", Nº " + dRow.ItemArray.GetValue(7).ToString();
                        }

                        this.txtBairro.Text = dRow.ItemArray.GetValue(3).ToString();
                        this.txtCidade.Text = dRow.ItemArray.GetValue(4).ToString();
                        this.txtPontoReferencia.Text = dRow.ItemArray.GetValue(5).ToString();


                        // MessageBox.Show("Data" + DateTime.Now.ToString() + "CodPessoa" + Convert.ToString(CodigoPessoa)+"Janela"+this.Name);
                        frmCadastrarPedido CadPedido = new frmCadastrarPedido(DateTime.Now, 0, CodigoPessoa, "0.00", "", "", "", this);

                        CadPedido.ShowDialog();
                        LimpaCampos();
                    }
                    else if ((pessoaTelefone.Tables["Pessoa"].Rows.Count >= 1))
                    {
                        MessageBox.Show("Há mais de um cliente cadastrado com o telefone informado, favor verificar os cadastros");
                    }
                }
                else
                {
                    MessageBox.Show("Preencha o campo telefone para buscar");
                }

            }

            catch (Exception errobusca)
            {

                MessageBox.Show("Erro ao consultar cliente, entre em contato com o suporte e informe o seguinte erro " + errobusca.Message);
            }
        }

        private void clientesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmClieForn frmCadClieForn = new frmClieForn();
            frmCadClieForn.ShowDialog();
        }


        private void clientesGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        public void DeletarGrupo(Object sender, EventArgs e)
        {
            try
            {

                if (produtosGridView.SelectedRows.Count > 0)
                {
                    rowIndex = int.Parse(produtosGridView.SelectedCells[0].Value.ToString());
                    this.produtosGridView.Rows.RemoveAt(rowIndex);

                    con.Delete("spExcluirProduto", rowIndex);
                    parentWindow.PopularGrid("Produto", parentWindow.pedidosGridView);
                    MessageBox.Show("Item excluído com sucesso.");
                }
                else
                {
                    MessageBox.Show("Selecione o produto para alterar");
                }
            }
            catch (Exception ErroDelete)
            {

                MessageBox.Show("Grupo não pode ser deletado entre em contato com o suporte e informa a seguinte Mensagem " + ErroDelete.Message);
            }

        }
        public void LimpaCampos()
        {
            txbTelefoneCliente.Text = "";
            txtBairro.Text = "";
            txtCidade.Text = "";
            txtEndereco.Text = "";
            txtNome.Text = "";
            txtPontoReferencia.Text = "";
            txbTelefoneCliente.Focus();
        }

        private void clientesToolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void estabelecimentoToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void empresaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmClieForn frm = new frmClieForn();
            frm.Show();
        }

        private void mCliente_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void ListaClientes(string table, DataGridView gridView)
        {
            this.clientesGridView.DataSource = null;
            this.clientesGridView.AutoGenerateColumns = true;
            this.clientesGridView.DataSource = con.SelectAll("Pessoa", "spObterPessoas");
            this.clientesGridView.DataMember = "Pessoa";
        }

        private void produtosGridView_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                if (produtosGridView.SelectedCells.Count > 0)
                {
                    var produto = new Produto()
                    {
                        Codigo = int.Parse(produtosGridView.SelectedCells[0].Value.ToString()),
                        Nome = (produtosGridView.SelectedCells[1].Value.ToString()),
                        Descricao = (produtosGridView.SelectedCells[2].Value.ToString()),
                        Preco = decimal.Parse(produtosGridView.SelectedCells[3].Value.ToString()),
                        GrupoProduto = (produtosGridView.SelectedCells[4].Value.ToString()),

                    };
                    if (DescontoDia)
                    {
                        if (produto.PrecoDesconto.ToString() != "")
                        {
                            produto.PrecoDesconto = decimal.Parse(produtosGridView.SelectedCells[5].Value.ToString());
                        }
                        if (produto.DiaSemana != "")
                        {
                            produto.DiaSemana = (produtosGridView.SelectedCells[6].Value.ToString());
                        }


                    }

                    frmCadastrarProduto frm = new frmCadastrarProduto(produto, this);
                    frm.StartPosition = FormStartPosition.CenterParent;
                    frm.Show();
                }
            }
            catch (Exception erro)
            {

                MessageBox.Show(erro.Message);
            }

        }

        private void clientesGridView_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (clientesGridView.SelectedCells.Count > 0)
            {
                var pessoa = new Pessoa()
                {
                    Codigo = int.Parse(clientesGridView.SelectedCells[0].Value.ToString()),
                    DataNascimento = Convert.ToDateTime(clientesGridView.SelectedCells[11].Value.ToString()),
                };

                frmCadastroCliente frm = new frmCadastroCliente(pessoa, this);
                frm.StartPosition = FormStartPosition.CenterParent;
                frm.Show();
            }
        }

        private void pedidosGridView_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                int codigo = 0;
                int codigoPessoa = 0;
                string tPara = null;
                string fPagamento = null;
                string MesaBalcao, tipoPedido = "";
                DateTime DataPedido;

                /* Code here */
                if (pedidosGridView.SelectedCells.Count > 0 && e.Button == System.Windows.Forms.MouseButtons.Left)
                {
                    codigo = int.Parse(pedidosGridView.SelectedCells[1].Value.ToString());
                    codigoPessoa = int.Parse(pedidosGridView.SelectedCells[2].Value.ToString());
                    tPara = pedidosGridView.SelectedCells[4].Value.ToString();
                    fPagamento = pedidosGridView.SelectedCells[5].Value.ToString();
                    DataPedido = Convert.ToDateTime(pedidosGridView.SelectedCells[7].Value.ToString());
                    tipoPedido = pedidosGridView.SelectedCells[8].Value.ToString();
                    MesaBalcao = pedidosGridView.SelectedCells[9].Value.ToString();

                    frmCadastrarPedido frm = new frmCadastrarPedido(DataPedido, codigo, codigoPessoa, tPara, fPagamento, tipoPedido, MesaBalcao, this);
                    frm.ShowDialog();
                }

            }
            catch (Exception es)
            {

                MessageBox.Show(es.Message);
            }
        }

        private void txbTelefoneCliente_Click(object sender, EventArgs e)
        {
            //BuscarCliente();
        }

        private void txbTelefoneCliente_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                BuscarCliente();
            }
        }

        private void ObterClienteParaRelatorio(object sender, EventArgs e)
        {
            frmReportPedidosPorPeriodo frmSelecionarCliente = new frmReportPedidosPorPeriodo();
            frmSelecionarCliente.Show();
           // frmSelecionarCliente.Dispose();
        }

        private void ReportProdutos(object sender, EventArgs e)
        {
            frmReportProdutos frm = new frmReportProdutos();
            frm.Show();
           // frm.Dispose();
        }

        private void usuáriosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmCadastroUsuario frm = new frmCadastroUsuario();
            frm.Show();
            //frm.Dispose();
        }

        private void sistemaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmConfiguracoes frm = new frmConfiguracoes();
            frm.Show();
           // frm.Dispose();
        }

        private void entregadorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmCadastrarEntregador frm = new frmCadastrarEntregador();
            frm.Show();
            //frm.Dispose();
        }

        private void produtosGridView_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {

        }

        private void Main_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
            Utils.Kill();
            con.Close();
        }

        private void formasDePagamentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmCadastrarFormaPagamento frm = new frmCadastrarFormaPagamento();
            frm.Show();
        }
        private void DeletarProduto(object sender, EventArgs e)
        {
            try
            {
                if (produtosGridView.SelectedRows.Count > 0)
                {
                    int Codigo = int.Parse(this.produtosGridView.SelectedCells[0].Value.ToString());
                    con.DeleteAll("Produto", "spExcluirProduto", Codigo);
                    MessageBox.Show("Item excluído com sucesso.");
                    PopularGrid("Produto", produtosGridView);
                }
                else
                {
                    MessageBox.Show("Selecione o produto para excluir");
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Não foi possivel excluir o produto , pois ele provavelmente ja foi usado em algum pedido");
            }


        }

        private void produtosGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void produtosGridView_MouseClick(object sender, MouseEventArgs e)
        {
            DataGridView dgv = sender as DataGridView;
            if (e.Button == MouseButtons.Right)
            {
                ContextMenu m = new ContextMenu();
                MenuItem ExcluirProduto = new MenuItem("Excluir Produto");
                ExcluirProduto.Click += DeletarProduto;
                m.MenuItems.Add(ExcluirProduto);
                int currentMouseOverRow = dgv.HitTest(e.X, e.Y).RowIndex;
                m.Show(dgv, new Point(e.X, e.Y));

            }
        }
        private void pedidosGridView_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {


        }
        private void CancelarPedidos(object sender, EventArgs e)
        {

            //if (UserCancelaPedido && ControlaLoginSenha)
            //{
            try
            {
                string NomeCliente = (this.pedidosGridView.SelectedCells[0].Value.ToString());
                if (pedidosGridView.SelectedRows.Count > 0)
                {
                    if (MessageBox.Show("Deseja **CANCELAR** o  pedido do Cliente " + NomeCliente + "?", "Cancelamento de Pedido !!!", MessageBoxButtons.OKCancel) == DialogResult.OK)
                    {
                        int Codigo = int.Parse(this.pedidosGridView.SelectedCells[1].Value.ToString());
                        cancelPedid.Codigo = Codigo;
                        cancelPedid.RealizadoEm = DateTime.Now;
                        cancelPedid.status = "Cancelado";
                        con.Update("spCancelarPedido", cancelPedid);
                        MessageBox.Show("Pedido Cancelado com sucesso.");
                        PopularGrid("Pedido", pedidosGridView, "spObterPedido");
                    }
                }
                else
                {
                    MessageBox.Show("Selecione um Pedido para **CANCELAR**");
                }
            }
            catch (Exception ER)
            {
                MessageBox.Show("Não foi possivel **CANCELAR O PEDIDO**" + ER.Message);
            }
            //}
            //else
            //{
            //    MessageBox.Show("Usuário não possui permissão para **CANCELAR** pedidos, deseja solicitar acesso do administrador?");
            //}
        }

        private void FinalizarPedido(object sender, EventArgs e)
        {
            try
            {
                int codigo;
                this.pedidosGridView.SelectedCells[6].Value = true;
                if (MessageBox.Show("Deseja ** FINALIZAR ** este pedido?", "Cuidado !!!", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    this.pedidosGridView.SelectedCells[6].Value = true;
                    codigo = int.Parse(pedidosGridView.SelectedCells[1].Value.ToString());
                    con.SinalizarPedidoConcluido("Pedido", "spSinalizarPedidoConcluido", codigo);
                    PopularGrid("Pedido", pedidosGridView, "spObterPedido");

                }
                else
                {
                    this.pedidosGridView.SelectedCells[6].Value = false;
                    LimpaCampos();
                }

            }
            catch (Exception)
            {
                MessageBox.Show("Não foi possivel selecionar o Pedido");
            }


        }


        private void renovarAtivarSistemaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmLicencaOFFLINE frm = new frmLicencaOFFLINE();
            frm.ShowDialog();
           // frm.Dispose();
        }

        private void MenuAuxiliar(object sender, MouseEventArgs e)
        {
            try
            {

                DataGridView dgv = sender as DataGridView;
                if (e.Button == MouseButtons.Right)
                {
                    ContextMenu m = new ContextMenu();
                    MenuItem MontarPedido = new MenuItem("Criar Pedido");
                    MenuItem ExcluirCliente = new MenuItem("Excluir Cliente");
                    MontarPedido.Click += CriarPedido;
                    m.MenuItems.Add(MontarPedido);
                    m.MenuItems.Add(ExcluirCliente);

                    int currentMouseOverRow = dgv.HitTest(e.X, e.Y).RowIndex;

                    m.Show(dgv, new Point(e.X, e.Y));
                }

            }
            catch (Exception x)
            {

                MessageBox.Show(x.Message);
            }
        }
        private void AbrirPedido(int CodPessoa)
        {
            try
            {
                frmCadastrarPedido frm = new frmCadastrarPedido(DateTime.Now, 0, CodPessoa, "", "", "", "", this);
                frm.ShowDialog();
              //  frm.Dispose();
            }
            catch (Exception x)
            {
                MessageBox.Show(x.Message);
            }
        }
        private void CriarPedido(object sender, EventArgs e)
        {
            try
            {
                rowIndex = clientesGridView.CurrentRow.Index;
                int CodCliente = int.Parse(clientesGridView.Rows[rowIndex].Cells[0].Value.ToString());
                AbrirPedido(CodCliente);
            }
            catch (Exception xx)
            {

                MessageBox.Show(xx.Message);
            }
        }

        private void envioDeSMSToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmEnvioSms frm = new frmEnvioSms();
            frm.ShowDialog();
           // frm.Dispose();
        }

        private void FiltrarPedidos(object sender, EventArgs e)
        {
            try
            {
                if (cbxFiltroTipo.Text != " ")
                {
                    string Consulta = null;
                    DataSet result = con.SelectAll("Pedido", "spObterPedido");
                    Consulta = cbxFiltroTipo.Text;

                    Consulta = "Tipo LIKE '%" + cbxFiltroTipo.Text + "%'";

                    var Linhas = result.Tables[0].DefaultView;
                    Linhas.RowFilter = Consulta;

                    var newDS = new DataSet("Pedido");
                    var newDT = Linhas.ToTable();

                    newDS.Tables.Add(newDT);

                    this.pedidosGridView.DataSource = null;
                    this.pedidosGridView.AutoGenerateColumns = true;
                    this.pedidosGridView.DataSource = newDS;
                    this.pedidosGridView.DataMember = "Pedido";
                }
                else
                {
                    PopularGrid("Pedido", this.pedidosGridView, "spObterPedido");
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Erro ao buscar clientes" + ex.Message);
            }

        }

        private void impressãoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmConfigurarImpressao frm = new frmConfigurarImpressao();
            frm.ShowDialog();
           // frm.Dispose();
        }

        private void geralToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            frmReportPessoas frm = new frmReportPessoas();
            frm.ShowDialog();
          //  frm.Dispose();
        }

        private void maisVendidosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmReportVendasPorProduto frm = new frmReportVendasPorProduto();
            frm.ShowDialog();
           // frm.Dispose();
        }

        private void pedidosGridView_MouseClick(object sender, MouseEventArgs e)
        {
            DataGridView dgv = sender as DataGridView;
            if (e.Button == MouseButtons.Right)
            {
                ContextMenu m = new ContextMenu();
                MenuItem CancPedido = new MenuItem(" 0 - Cancelar Pedidos");
                MenuItem EnviaTab = new MenuItem(" 1 - Enviar Garçon");
                MenuItem FinalizarPed = new MenuItem(" 2 - Finalizar Pedido");

                CancPedido.Click += CancelarPedidos;
                FinalizarPed.Click += FinalizarPedido;

                m.MenuItems.Add(CancPedido);
                m.MenuItems.Add(EnviaTab);
                m.MenuItems.Add(FinalizarPed);

                int currentMouseOverRow = dgv.HitTest(e.X, e.Y).RowIndex;
                m.Show(dgv, new Point(e.X, e.Y));

            }
        }

        private void CadastroSMSEMAIL(object sender, EventArgs e)
        {
            frmCadastroEmailSMS frm = new frmCadastroEmailSMS();
            frm.ShowDialog();
            frm.Dispose();
        }

        private void exportarDadosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmExportacao frm = new frmExportacao();
            frm.ShowDialog();
            frm.Dispose();
        }

        private void contatoAtivaçãoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmContato frm = new frmContato();
            frm.ShowDialog();
        }
    }
}



